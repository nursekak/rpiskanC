#include "fpv_interceptor.h"
#include <gtk/gtk.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <cairo/cairo.h>
#include <opencv4/opencv2/opencv.hpp>
#include <opencv4/opencv2/highgui.hpp>
#include <opencv4/opencv2/imgproc.hpp>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ GUI
static GtkWidget *video_widget;
static GtkWidget *status_label;
static GtkWidget *rssi_progress;
static GtkWidget *frequency_label;
static GtkWidget *scan_button;
static GtkWidget *stop_button;
static GtkWidget *frequency_entry;
static GtkWidget *rssi_chart;

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ RSSI
static double rssi_history[100];
static int rssi_index = 0;
static int rssi_count = 0;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
static gboolean scanning = FALSE;
static gboolean video_capturing = FALSE;
static guint scan_timer_id = 0;
static guint video_timer_id = 0;

// OpenCV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
static cv::VideoCapture *video_capture = nullptr;
static cv::Mat current_frame;

// GUI –≤–∏–¥–∂–µ—Ç—ã
static GtkWidget *quality_label = nullptr;
static GtkWidget *motion_label = nullptr;

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OpenCV Mat –≤ GdkPixbuf
 */
GdkPixbuf* convert_mat_to_pixbuf(const cv::Mat &mat) {
    if (mat.empty()) return nullptr;
    
    cv::Mat rgb_mat;
    if (mat.channels() == 3) {
        cv::cvtColor(mat, rgb_mat, cv::COLOR_BGR2RGB);
    } else if (mat.channels() == 1) {
        cv::cvtColor(mat, rgb_mat, cv::COLOR_GRAY2RGB);
    } else {
        return nullptr;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ GdkPixbuf
    GdkPixbuf *pixbuf = gdk_pixbuf_new_from_data(
        rgb_mat.data,
        GDK_COLORSPACE_RGB,
        FALSE,
        8,
        rgb_mat.cols,
        rgb_mat.rows,
        rgb_mat.step,
        nullptr,
        nullptr
    );
    
    return pixbuf;
}

/**
 * Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI —Å –Ω–æ–≤—ã–º –∫–∞–¥—Ä–æ–º
 */
void gui_update_frame(void* frame_ptr) {
    cv::Mat* frame = static_cast<cv::Mat*>(frame_ptr);
    if (frame && !frame->empty()) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
        GdkPixbuf *pixbuf = convert_mat_to_pixbuf(*frame);
        if (pixbuf) {
            gtk_image_set_from_pixbuf(GTK_IMAGE(video_widget), pixbuf);
            g_object_unref(pixbuf);
        }
    }
}

/**
 * Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ GUI
 */
void gui_update_status(const char* message) {
    update_status(message);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–∑–∞—Ö–≤–∞—Ç–∞ GUI
 */
int init_gui_video_capture(void) {
    printf("üìπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–∑–∞—Ö–≤–∞—Ç–∞ GUI —Å OpenCV...\n");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π
    set_gui_callbacks(gui_update_frame, gui_update_status);
    
    printf("‚úÖ –í–∏–¥–µ–æ–∑–∞—Ö–≤–∞—Ç GUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å OpenCV\n");
    return 0;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ GUI
 */
void update_status(const char *message) {
    gtk_label_set_text(GTK_LABEL(status_label), message);
    gtk_widget_queue_draw(status_label);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSSI –≤ GUI
 */
void update_rssi_display(uint8_t rssi, uint16_t frequency) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ RSSI
    gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(rssi_progress), rssi / 100.0);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —á–∞—Å—Ç–æ—Ç—ã
    char freq_text[64];
    snprintf(freq_text, sizeof(freq_text), "–ß–∞—Å—Ç–æ—Ç–∞: %d –ú–ì—Ü | RSSI: %d%%", frequency, rssi);
    gtk_label_set_text(GTK_LABEL(frequency_label), freq_text);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    rssi_history[rssi_index] = rssi;
    rssi_index = (rssi_index + 1) % 100;
    if (rssi_count < 100) rssi_count++;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    gtk_widget_queue_draw(rssi_chart);
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ RSSI
 */
gboolean draw_rssi_chart(GtkWidget *widget, cairo_t *cr, gpointer data) {
    (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    GtkAllocation allocation;
    gtk_widget_get_allocation(widget, &allocation);
    
    int width = allocation.width;
    int height = allocation.height;
    
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–∞
    cairo_set_source_rgb(cr, 0.1, 0.1, 0.1);
    cairo_rectangle(cr, 0, 0, width, height);
    cairo_fill(cr);
    
    if (rssi_count < 2) return FALSE;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–Ω–∏–π
    cairo_set_line_width(cr, 2.0);
    cairo_set_source_rgb(cr, 0.0, 1.0, 0.0); // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    double x_step = (double)width / (rssi_count - 1);
    double y_scale = (double)height / 100.0;
    
    cairo_move_to(cr, 0, height - rssi_history[0] * y_scale);
    
    for (int i = 1; i < rssi_count; i++) {
        double x = i * x_step;
        double y = height - rssi_history[i] * y_scale;
        cairo_line_to(cr, x, y);
    }
    
    cairo_stroke(cr);
    
    return FALSE;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ GUI
 */
gboolean update_video_display(gpointer data) {
    (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (!video_capturing) return FALSE;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞ –æ—Ç –≤–∏–¥–µ–æ–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    void* frame_ptr = get_current_frame();
    cv::Mat* frame = static_cast<cv::Mat*>(frame_ptr);
    if (frame && !frame->empty()) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ GdkPixbuf –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        GdkPixbuf *pixbuf = convert_mat_to_pixbuf(*frame);
        if (pixbuf) {
            gtk_image_set_from_pixbuf(GTK_IMAGE(video_widget), pixbuf);
            g_object_unref(pixbuf);
        }
        
        // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
        int quality = analyze_video_quality(frame);
        char quality_text[64];
        snprintf(quality_text, sizeof(quality_text), "–ö–∞—á–µ—Å—Ç–≤–æ: %d%%", quality);
        if (quality_label) {
            gtk_label_set_text(GTK_LABEL(quality_label), quality_text);
        }
        
        // –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        if (detect_motion(frame)) {
            if (motion_label) {
                gtk_label_set_text(GTK_LABEL(motion_label), "–î–≤–∏–∂–µ–Ω–∏–µ: –î–ê");
            }
        } else {
            if (motion_label) {
                gtk_label_set_text(GTK_LABEL(motion_label), "–î–≤–∏–∂–µ–Ω–∏–µ: –ù–ï–¢");
            }
        }
        
        update_status("üìπ –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ...");
        delete frame; // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    } else {
        update_status("‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ—Å–∏–≥–Ω–∞–ª–∞");
    }
    
    return TRUE;
}

/**
 * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç –≤ GUI
 */
gboolean scan_frequencies(gpointer data) {
    (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (!scanning) return FALSE;
    
    static uint16_t current_freq = FREQ_MIN;
    static int scan_cycle = 0;
    static int signals_found = 0;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
    if (rx5808_set_frequency(current_freq) == 0) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        usleep(50000); // 50 –º—Å
        
        // –ß—Ç–µ–Ω–∏–µ RSSI
        uint8_t rssi = rx5808_read_rssi();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
        update_rssi_display(rssi, current_freq);
        
        // –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        int total_channels = (FREQ_MAX - FREQ_MIN) / FREQ_STEP + 1;
        int current_channel = (current_freq - FREQ_MIN) / FREQ_STEP + 1;
        int progress_percent = (current_channel * 100) / total_channels;
        
        char progress_msg[256];
        snprintf(progress_msg, sizeof(progress_msg), 
                "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: %d –ú–ì—Ü (%d/%d, %d%%) | RSSI: %d%% | –ù–∞–π–¥–µ–Ω–æ: %d", 
                current_freq, current_channel, total_channels, progress_percent, rssi, signals_found);
        update_status(progress_msg);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if (rssi > RSSI_THRESHOLD) {
            signals_found++;
            char message[256];
            snprintf(message, sizeof(message), 
                    "üéØ –°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù: %d –ú–ì—Ü, RSSI: %d%% (—Å–∏–≥–Ω–∞–ª #%d)", 
                    current_freq, rssi, signals_found);
            update_status(message);
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            add_detected_signal(current_freq, rssi, "FPV Video");
            
            // –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ
            capture_video_frame(current_freq);
            
            // –ù–∞—á–∞–ª–æ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ
            if (!video_capturing) {
                video_capturing = TRUE;
                video_timer_id = g_timeout_add(100, update_video_display, NULL);
            }
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–æ—Ç–µ
        current_freq += FREQ_STEP;
        if (current_freq > FREQ_MAX) {
            current_freq = FREQ_MIN;
            scan_cycle++;
            
            char cycle_msg[128];
            snprintf(cycle_msg, sizeof(cycle_msg), 
                    "üîÑ –¶–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #%d –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: %d", 
                    scan_cycle, signals_found);
            update_status(cycle_msg);
        }
    } else {
        char error_msg[128];
        snprintf(error_msg, sizeof(error_msg), 
                "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã %d –ú–ì—Ü", current_freq);
        update_status(error_msg);
    }
    
    return TRUE;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
 */
void on_scan_button_clicked(GtkWidget *widget, gpointer data) {
    (void)widget; (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if (!scanning) {
        scanning = TRUE;
        gtk_button_set_label(GTK_BUTTON(scan_button), "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å");
        gtk_widget_set_sensitive(stop_button, TRUE);
        
        update_status("üîç –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...");
        
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scan_timer_id = g_timeout_add(100, scan_frequencies, NULL);
    } else {
        scanning = FALSE;
        gtk_button_set_label(GTK_BUTTON(scan_button), "üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
        gtk_widget_set_sensitive(stop_button, FALSE);
        
        update_status("‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
        if (scan_timer_id) {
            g_source_remove(scan_timer_id);
            scan_timer_id = 0;
        }
        if (video_timer_id) {
            g_source_remove(video_timer_id);
            video_timer_id = 0;
            video_capturing = FALSE;
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
 */
void on_stop_button_clicked(GtkWidget *widget, gpointer data) {
    (void)widget; (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    scanning = FALSE;
    video_capturing = FALSE;
    
    gtk_button_set_label(GTK_BUTTON(scan_button), "üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
    gtk_widget_set_sensitive(stop_button, FALSE);
    
    update_status("‚èπÔ∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
    if (scan_timer_id) {
        g_source_remove(scan_timer_id);
        scan_timer_id = 0;
    }
    if (video_timer_id) {
        g_source_remove(video_timer_id);
        video_timer_id = 0;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã"
 */
void on_monitor_frequency(GtkWidget *widget, gpointer data) {
    (void)widget; (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    const char *freq_text = gtk_entry_get_text(GTK_ENTRY(frequency_entry));
    int frequency = atoi(freq_text);
    
    if (frequency < FREQ_MIN || frequency > FREQ_MAX) {
        update_status("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞. –î–∏–∞–ø–∞–∑–æ–Ω: 5725-6000 –ú–ì—Ü");
        return;
    }
    
    update_status("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã...");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
    if (rx5808_set_frequency(frequency) == 0) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        usleep(100000); // 100 –º—Å
        
        // –ß—Ç–µ–Ω–∏–µ RSSI –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        uint8_t rssi = rx5808_read_rssi_averaged(5);
        update_rssi_display(rssi, frequency);
        
        char monitor_msg[128];
        snprintf(monitor_msg, sizeof(monitor_msg), 
                "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ %d –ú–ì—Ü | RSSI: %d%% | %s", 
                frequency, rssi, 
                rssi > RSSI_THRESHOLD ? "–°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù!" : "–°–∏–≥–Ω–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
        update_status(monitor_msg);
        
        // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ
        if (rssi > RSSI_THRESHOLD) {
            add_detected_signal(frequency, rssi, "Manual Monitor");
            capture_video_frame(frequency);
            
            if (!video_capturing) {
                video_capturing = TRUE;
                video_timer_id = g_timeout_add(100, update_video_display, NULL);
            }
        }
    } else {
        update_status("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã");
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
GtkWidget* create_main_window(void) {
    GtkWidget *window;
    GtkWidget *vbox, *hbox;
    GtkWidget *video_frame, *control_frame;
    GtkWidget *separator;
    
    // –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window), "FPV Interceptor - –ü–µ—Ä–µ—Ö–≤–∞—Ç FPV —Å–∏–≥–Ω–∞–ª–æ–≤ 5.8 –ì–ì—Ü");
    gtk_window_set_default_size(GTK_WINDOW(window), 1200, 800);
    gtk_window_set_resizable(GTK_WINDOW(window), TRUE);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);
    gtk_container_add(GTK_CONTAINER(window), vbox);
    
    // –û–±–ª–∞—Å—Ç—å –≤–∏–¥–µ–æ
    video_frame = gtk_frame_new("üìπ –í–∏–¥–µ–æ (USB Video DVR) - OpenCV");
    gtk_frame_set_shadow_type(GTK_FRAME(video_frame), GTK_SHADOW_IN);
    gtk_box_pack_start(GTK_BOX(vbox), video_frame, TRUE, TRUE, 5);
    
    video_widget = gtk_image_new();
    gtk_widget_set_size_request(video_widget, 800, 400);
    gtk_container_add(GTK_CONTAINER(video_frame), video_widget);
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    separator = gtk_separator_new(GTK_ORIENTATION_HORIZONTAL);
    gtk_box_pack_start(GTK_BOX(vbox), separator, FALSE, FALSE, 5);
    
    // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_frame = gtk_frame_new("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
    gtk_frame_set_shadow_type(GTK_FRAME(control_frame), GTK_SHADOW_IN);
    gtk_box_pack_start(GTK_BOX(vbox), control_frame, FALSE, FALSE, 5);
    
    GtkWidget *control_vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);
    gtk_container_add(GTK_CONTAINER(control_frame), control_vbox);
    
    // –°—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 10);
    gtk_box_pack_start(GTK_BOX(control_vbox), hbox, FALSE, FALSE, 5);
    
    scan_button = gtk_button_new_with_label("üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
    gtk_widget_set_size_request(scan_button, 200, 40);
    gtk_box_pack_start(GTK_BOX(hbox), scan_button, FALSE, FALSE, 5);
    g_signal_connect(scan_button, "clicked", G_CALLBACK(on_scan_button_clicked), NULL);
    
    stop_button = gtk_button_new_with_label("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å");
    gtk_widget_set_size_request(stop_button, 150, 40);
    gtk_widget_set_sensitive(stop_button, FALSE);
    gtk_box_pack_start(GTK_BOX(hbox), stop_button, FALSE, FALSE, 5);
    g_signal_connect(stop_button, "clicked", G_CALLBACK(on_stop_button_clicked), NULL);
    
    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Å—Ç–æ—Ç—ã
    GtkWidget *freq_label = gtk_label_new("–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü):");
    gtk_box_pack_start(GTK_BOX(hbox), freq_label, FALSE, FALSE, 5);
    
    frequency_entry = gtk_entry_new();
    gtk_entry_set_placeholder_text(GTK_ENTRY(frequency_entry), "5800");
    gtk_widget_set_size_request(frequency_entry, 100, 30);
    gtk_box_pack_start(GTK_BOX(hbox), frequency_entry, FALSE, FALSE, 5);
    
    GtkWidget *monitor_button = gtk_button_new_with_label("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
    gtk_widget_set_size_request(monitor_button, 120, 30);
    gtk_box_pack_start(GTK_BOX(hbox), monitor_button, FALSE, FALSE, 5);
    g_signal_connect(monitor_button, "clicked", G_CALLBACK(on_monitor_frequency), NULL);
    
    // –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 10);
    gtk_box_pack_start(GTK_BOX(control_vbox), hbox, FALSE, FALSE, 5);
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSSI
    GtkWidget *rssi_label = gtk_label_new("RSSI:");
    gtk_box_pack_start(GTK_BOX(hbox), rssi_label, FALSE, FALSE, 5);
    
    rssi_progress = gtk_progress_bar_new();
    gtk_widget_set_size_request(rssi_progress, 200, 25);
    gtk_box_pack_start(GTK_BOX(hbox), rssi_progress, FALSE, FALSE, 5);
    
    // –ú–µ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∏ RSSI
    frequency_label = gtk_label_new("–ß–∞—Å—Ç–æ—Ç–∞: -- –ú–ì—Ü | RSSI: --%");
    gtk_box_pack_start(GTK_BOX(hbox), frequency_label, FALSE, FALSE, 5);
    
    // –ì—Ä–∞—Ñ–∏–∫ RSSI
    GtkWidget *chart_frame = gtk_frame_new("üìä –ì—Ä–∞—Ñ–∏–∫ RSSI");
    gtk_frame_set_shadow_type(GTK_FRAME(chart_frame), GTK_SHADOW_IN);
    gtk_box_pack_start(GTK_BOX(control_vbox), chart_frame, FALSE, FALSE, 5);
    
    rssi_chart = gtk_drawing_area_new();
    gtk_widget_set_size_request(rssi_chart, 800, 150);
    gtk_container_add(GTK_CONTAINER(chart_frame), rssi_chart);
    g_signal_connect(rssi_chart, "draw", G_CALLBACK(draw_rssi_chart), NULL);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
    hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 10);
    gtk_box_pack_start(GTK_BOX(control_vbox), hbox, FALSE, FALSE, 5);
    
    quality_label = gtk_label_new("–ö–∞—á–µ—Å—Ç–≤–æ: --%");
    gtk_box_pack_start(GTK_BOX(hbox), quality_label, FALSE, FALSE, 5);
    
    motion_label = gtk_label_new("–î–≤–∏–∂–µ–Ω–∏–µ: –ù–ï–¢");
    gtk_box_pack_start(GTK_BOX(hbox), motion_label, FALSE, FALSE, 5);
    
    // –°—Ç–∞—Ç—É—Å
    status_label = gtk_label_new("üöÄ FPV Interceptor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (—Å OpenCV)");
    gtk_label_set_xalign(GTK_LABEL(status_label), 0.0);
    gtk_box_pack_start(GTK_BOX(control_vbox), status_label, FALSE, FALSE, 5);
    
    return window;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
 */
gboolean on_window_delete_event(GtkWidget *widget, GdkEvent *event, gpointer data) {
    (void)widget; (void)event; (void)data; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    scanning = FALSE;
    video_capturing = FALSE;
    
    if (scan_timer_id) {
        g_source_remove(scan_timer_id);
    }
    if (video_timer_id) {
        g_source_remove(video_timer_id);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ OpenCV
    if (video_capture) {
        video_capture->release();
        delete video_capture;
        video_capture = nullptr;
    }
    
    gtk_main_quit();
    return FALSE;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è GUI
 */
int main(int argc, char *argv[]) {
    GtkWidget *window;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GTK
    gtk_init(&argc, &argv);
    
    printf("üöÄ –ó–∞–ø—É—Å–∫ FPV Interceptor GUI —Å OpenCV...\n");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    if (rx5808_init() != 0) {
        printf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RX5808\n");
        return -1;
    }
    
    if (rssi_analyzer_init() != 0) {
        printf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ RSSI\n");
        return -1;
    }
    
    if (init_gui_video_capture() != 0) {
        printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: GUI –≤–∏–¥–µ–æ–∑–∞—Ö–≤–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n");
        printf("‚ÑπÔ∏è –í–∏–¥–µ–æ–∑–∞—Ö–≤–∞—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ RSSI –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç\n");
    }
    
    if (frequency_scanner_init() != 0) {
        printf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞ —á–∞—Å—Ç–æ—Ç\n");
        return -1;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = create_main_window();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    g_signal_connect(window, "delete-event", G_CALLBACK(on_window_delete_event), NULL);
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
    gtk_widget_show_all(window);
    
    printf("‚úÖ GUI –∑–∞–ø—É—â–µ–Ω —Å OpenCV\n");
    
    // –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ GTK
    gtk_main();
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cleanup_resources();
    video_detector_cleanup();
    rx5808_cleanup();
    
    return 0;
}
