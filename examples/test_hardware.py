#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è FPV Interceptor
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ RX5808, SPI, GPIO –∏ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
"""

import pigpio
import time
import subprocess
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∏–Ω–æ–≤
CS_PIN = 8
MOSI_PIN = 10
MISO_PIN = 9
SCK_PIN = 11
RSSI_PIN = 7

def test_gpio():
    """–¢–µ—Å—Ç GPIO –ø–∏–Ω–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO...")
    
    try:
        pi = pigpio.pi()
        if not pi.connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ pigpio")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
        pi.set_mode(CS_PIN, pigpio.OUTPUT)
        pi.set_mode(MOSI_PIN, pigpio.OUTPUT)
        pi.set_mode(SCK_PIN, pigpio.OUTPUT)
        pi.set_mode(RSSI_PIN, pigpio.INPUT)
        
        # –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∏–Ω–æ–≤
        pi.write(CS_PIN, 1)
        pi.write(MOSI_PIN, 0)
        pi.write(SCK_PIN, 0)
        time.sleep(0.1)
        
        pi.write(CS_PIN, 0)
        pi.write(MOSI_PIN, 1)
        pi.write(SCK_PIN, 1)
        time.sleep(0.1)
        
        # –¢–µ—Å—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∏–Ω–∞ RSSI
        rssi_value = pi.read(RSSI_PIN)
        
        print(f"‚úÖ GPIO —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        print(f"   RSSI pin {RSSI_PIN}: {rssi_value}")
        
        pi.stop()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPIO: {e}")
        return False

def test_spi():
    """–¢–µ—Å—Ç SPI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SPI...")
    
    try:
        pi = pigpio.pi()
        if not pi.connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ pigpio")
            return False
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ SPI
        spi_handle = pi.spi_open(0, 2000000)
        if spi_handle < 0:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SPI")
            pi.stop()
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CS –ø–∏–Ω–∞
        pi.set_mode(CS_PIN, pigpio.OUTPUT)
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        pi.write(CS_PIN, 0)
        count, data = pi.spi_write(spi_handle, [0x01, 0x02, 0x03])
        pi.write(CS_PIN, 1)
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        pi.write(CS_PIN, 0)
        count, data = pi.spi_read(spi_handle, 3)
        pi.write(CS_PIN, 1)
        
        print(f"‚úÖ SPI —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        pi.spi_close(spi_handle)
        pi.stop()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SPI: {e}")
        return False

def test_video():
    """–¢–µ—Å—Ç –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("üìπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
    
    try:
        # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
        result = subprocess.run(['ls', '/dev/video*'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            devices = result.stdout.strip().split('\n')
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {devices}")
            return True
        else:
            print("‚ùå –í–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {e}")
        return False

def test_usb():
    """–¢–µ—Å—Ç USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USB...")
    
    try:
        result = subprocess.run(['lsusb'], capture_output=True, text=True)
        
        if result.returncode == 0:
            usb_devices = result.stdout
            print("‚úÖ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            print(usb_devices)
            
            # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if 'video' in usb_devices.lower() or 'dvr' in usb_devices.lower():
                print("‚úÖ –ù–∞–π–¥–µ–Ω—ã USB –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                return True
            else:
                print("‚ö†Ô∏è USB –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ USB: {e}")
        return False

def test_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("üíª –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SPI
        if os.path.exists('/dev/spi0.0'):
            print("‚úÖ SPI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå SPI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ I2C
        if os.path.exists('/dev/i2c-1'):
            print("‚úÖ I2C –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è I2C –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        with open('/proc/meminfo', 'r') as f:
            meminfo = f.read()
            for line in meminfo.split('\n'):
                if 'MemAvailable' in line:
                    mem_available = int(line.split()[1])
                    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {mem_available} KB")
                    break
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def test_rx5808():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è RX5808"""
    print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RX5808...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pigpio
        pi = pigpio.pi()
        if not pi.connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ pigpio")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
        pi.set_mode(CS_PIN, pigpio.OUTPUT)
        pi.set_mode(MOSI_PIN, pigpio.OUTPUT)
        pi.set_mode(SCK_PIN, pigpio.OUTPUT)
        pi.set_mode(RSSI_PIN, pigpio.INPUT)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPI
        spi_handle = pi.spi_open(0, 2000000)
        if spi_handle < 0:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SPI")
            pi.stop()
            return False
        
        # –°–±—Ä–æ—Å –º–æ–¥—É–ª—è
        pi.write(CS_PIN, 0)
        time.sleep(0.1)
        pi.write(CS_PIN, 1)
        time.sleep(0.1)
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        pi.write(CS_PIN, 0)
        count, data = pi.spi_write(spi_handle, [0x8A, 0x00])  # –ó–∞–ø–∏—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä 0A
        pi.write(CS_PIN, 1)
        time.sleep(0.01)
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
        pi.write(CS_PIN, 0)
        count, data = pi.spi_read(spi_handle, 2)  # –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0A
        pi.write(CS_PIN, 1)
        
        print(f"‚úÖ RX5808 —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –¢–µ—Å—Ç RSSI
        rssi_values = []
        for i in range(10):
            rssi_values.append(pi.read(RSSI_PIN))
            time.sleep(0.1)
        
        avg_rssi = sum(rssi_values) / len(rssi_values)
        print(f"   –°—Ä–µ–¥–Ω–∏–π RSSI: {avg_rssi:.2f}")
        
        pi.spi_close(spi_handle)
        pi.stop()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RX5808: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è FPV Interceptor")
    print("=" * 60)
    
    tests = [
        ("GPIO", test_gpio),
        ("SPI", test_spi),
        ("–í–∏–¥–µ–æ", test_video),
        ("USB", test_usb),
        ("–°–∏—Å—Ç–µ–º–∞", test_system),
        ("RX5808", test_rx5808)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
