#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫–∞–Ω–µ—Ä FPV —Å–∏–≥–Ω–∞–ª–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º RSSI
"""

import pigpio
import time
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FREQ_MIN = 5725
FREQ_MAX = 6000
FREQ_STEP = 1
RSSI_THRESHOLD = 50

# GPIO –ø–∏–Ω—ã
CS_PIN = 8
MOSI_PIN = 10
MISO_PIN = 9
SCK_PIN = 11
RSSI_PIN = 7

class SimpleFPVScanner:
    def __init__(self):
        self.pi = None
        self.spi_handle = None
        self.running = True
        
    def init_hardware(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pigpio
            self.pi = pigpio.pi()
            if not self.pi.connected:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ pigpio")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
            self.pi.set_mode(CS_PIN, pigpio.OUTPUT)
            self.pi.set_mode(MOSI_PIN, pigpio.OUTPUT)
            self.pi.set_mode(SCK_PIN, pigpio.OUTPUT)
            self.pi.set_mode(RSSI_PIN, pigpio.INPUT)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPI
            self.spi_handle = self.pi.spi_open(0, 2000000)
            if self.spi_handle < 0:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SPI")
                self.pi.stop()
                return False
            
            print("‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def set_frequency(self, frequency):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞ RX5808"""
        try:
            # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è RX5808
            freq_reg = int((frequency - 479) * 8192 / 1000)
            
            # –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –±–∞–π—Ç—ã
            reg_0A = (freq_reg >> 8) & 0xFF
            reg_0B = freq_reg & 0xFF
            
            # –ó–∞–ø–∏—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            self.pi.write(CS_PIN, 0)
            self.pi.spi_write(self.spi_handle, [0x8A, reg_0A])  # –†–µ–≥–∏—Å—Ç—Ä 0A
            self.pi.write(CS_PIN, 1)
            time.sleep(0.01)
            
            self.pi.write(CS_PIN, 0)
            self.pi.spi_write(self.spi_handle, [0x8B, reg_0B])  # –†–µ–≥–∏—Å—Ç—Ä 0B
            self.pi.write(CS_PIN, 1)
            time.sleep(0.01)
            
            # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞
            self.pi.write(CS_PIN, 0)
            self.pi.spi_write(self.spi_handle, [0x8C, 0x01])  # –†–µ–≥–∏—Å—Ç—Ä 0C
            self.pi.write(CS_PIN, 1)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(0.05)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã {frequency}: {e}")
            return False
    
    def read_rssi(self):
        """–ß—Ç–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è RSSI"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ RSSI
            rssi_digital = self.pi.read(RSSI_PIN)
            
            # –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ADC
            # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            rssi_percent = rssi_digital * 100
            
            return rssi_percent
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è RSSI: {e}")
            return 0
    
    def scan_frequency(self, frequency):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã"""
        if not self.set_frequency(frequency):
            return 0
        
        # –ß—Ç–µ–Ω–∏–µ RSSI —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º
        rssi_sum = 0
        samples = 10
        
        for i in range(samples):
            rssi_sum += self.read_rssi()
            time.sleep(0.01)
        
        avg_rssi = rssi_sum / samples
        return avg_rssi
    
    def scan_range(self, start_freq, end_freq):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∞—Å—Ç–æ—Ç"""
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_freq}-{end_freq} –ú–ì—Ü...")
        
        signals_found = []
        
        for freq in range(start_freq, end_freq + 1, FREQ_STEP):
            if not self.running:
                break
                
            rssi = self.scan_frequency(freq)
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
            status = "üì°" if rssi < RSSI_THRESHOLD else "üéØ"
            print(f"{status} {freq} –ú–ì—Ü: RSSI = {rssi:.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            if rssi > RSSI_THRESHOLD:
                signals_found.append({
                    'frequency': freq,
                    'rssi': rssi,
                    'timestamp': time.time()
                })
                print(f"üéØ –°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù: {freq} –ú–ì—Ü, RSSI: {rssi:.1f}%")
        
        return signals_found
    
    def continuous_scan(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...")
        
        try:
            while self.running:
                signals = self.scan_range(FREQ_MIN, FREQ_MAX)
                
                if signals:
                    print(f"\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
                    for signal in signals:
                        print(f"   {signal['frequency']} –ú–ì—Ü: {signal['rssi']:.1f}%")
                
                print("\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
    
    def monitor_frequency(self, frequency, duration=0):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã"""
        print(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã {frequency} –ú–ì—Ü...")
        
        if not self.set_frequency(frequency):
            return
        
        start_time = time.time()
        last_rssi = 0
        
        try:
            while self.running:
                rssi = self.read_rssi()
                
                # –í—ã–≤–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–π RSSI
                if abs(rssi - last_rssi) > 5:
                    print(f"üìä {frequency} –ú–ì—Ü: RSSI = {rssi:.1f}%")
                    last_rssi = rssi
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                if duration > 0 and (time.time() - start_time) > duration:
                    break
                
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.running = False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.spi_handle is not None:
            self.pi.spi_close(self.spi_handle)
        
        if self.pi:
            self.pi.stop()
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def show_menu():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é"""
    print("\n" + "="*50)
    print("üöÅ –ü—Ä–æ—Å—Ç–æ–π FPV –°–∫–∞–Ω–µ—Ä")
    print("="*50)
    print("1. –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("2. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã")
    print("5. –¢–µ—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    print("0. –í—ã—Ö–æ–¥")
    print("="*50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ FPV —Å–∫–∞–Ω–µ—Ä–∞...")
    
    scanner = SimpleFPVScanner()
    
    if not scanner.init_hardware():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        return 1
    
    try:
        while True:
            show_menu()
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
            
            if choice == "1":
                signals = scanner.scan_range(FREQ_MIN, FREQ_MAX)
                if signals:
                    print(f"\nüéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
                    for signal in signals:
                        print(f"   {signal['frequency']} –ú–ì—Ü: {signal['rssi']:.1f}%")
                else:
                    print("\nüì≠ –°–∏–≥–Ω–∞–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            
            elif choice == "2":
                scanner.continuous_scan()
            
            elif choice == "3":
                try:
                    start = int(input(f"–ù–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ ({FREQ_MIN}-{FREQ_MAX}): "))
                    end = int(input(f"–ö–æ–Ω–µ—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ ({start}-{FREQ_MAX}): "))
                    
                    if FREQ_MIN <= start <= end <= FREQ_MAX:
                        signals = scanner.scan_range(start, end)
                        if signals:
                            print(f"\nüéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                        else:
                            print("\nüì≠ –°–∏–≥–Ω–∞–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç")
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            
            elif choice == "4":
                try:
                    freq = int(input(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({FREQ_MIN}-{FREQ_MAX}): "))
                    duration = int(input("–í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ): "))
                    
                    if FREQ_MIN <= freq <= FREQ_MAX:
                        scanner.monitor_frequency(freq, duration)
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞")
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            
            elif choice == "5":
                print("üîß –¢–µ—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
                test_freq = 5800
                if scanner.set_frequency(test_freq):
                    rssi = scanner.read_rssi()
                    print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {test_freq} –ú–ì—Ü, RSSI: {rssi:.1f}%")
                else:
                    print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            
            elif choice == "0":
                print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    finally:
        scanner.cleanup()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
