#include "fpv_interceptor.h"
#include <opencv4/opencv2/opencv.hpp>
#include <opencv4/opencv2/highgui.hpp>
#include <opencv4/opencv2/imgproc.hpp>
#include <iostream>

int main() {
    printf("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USB DVR...\n");
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    printf("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ /dev/video0...\n");
    if (access("/dev/video0", F_OK) != 0) {
        printf("‚ùå /dev/video0 –Ω–µ –Ω–∞–π–¥–µ–Ω\n");
        return -1;
    }
    printf("‚úÖ /dev/video0 –Ω–∞–π–¥–µ–Ω\n");
    
    // –¢–µ—Å—Ç 2: –û—Ç–∫—Ä—ã—Ç–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    printf("\n2Ô∏è‚É£ –û—Ç–∫—Ä—ã—Ç–∏–µ USB DVR...\n");
    cv::VideoCapture cap;
    if (!cap.open("/dev/video0")) {
        printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å /dev/video0\n");
        return -1;
    }
    printf("‚úÖ USB DVR –æ—Ç–∫—Ä—ã—Ç\n");
    
    // –¢–µ—Å—Ç 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    printf("\n3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n");
    cap.set(cv::CAP_PROP_FRAME_WIDTH, 640);
    cap.set(cv::CAP_PROP_FRAME_HEIGHT, 480);
    cap.set(cv::CAP_PROP_FPS, 30);
    cap.set(cv::CAP_PROP_FOURCC, cv::VideoWriter::fourcc('Y', 'U', 'Y', 'V'));
    cap.set(cv::CAP_PROP_BUFFERSIZE, 1);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    double width = cap.get(cv::CAP_PROP_FRAME_WIDTH);
    double height = cap.get(cv::CAP_PROP_FRAME_HEIGHT);
    double fps = cap.get(cv::CAP_PROP_FPS);
    double fourcc = cap.get(cv::CAP_PROP_FOURCC);
    
    printf("   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: %.0fx%.0f\n", width, height);
    printf("   FPS: %.1f\n", fps);
    printf("   –§–æ—Ä–º–∞—Ç: %.0f (YUYV=1448695129)\n", fourcc);
    
    // –¢–µ—Å—Ç 4: –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤
    printf("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤...\n");
    cv::Mat frame;
    int success_count = 0;
    int total_attempts = 10;
    
    for (int i = 0; i < total_attempts; i++) {
        if (cap.read(frame)) {
            if (!frame.empty()) {
                success_count++;
                printf("   –ö–∞–¥—Ä %d: ‚úÖ %dx%d, %d –∫–∞–Ω–∞–ª–æ–≤\n", 
                       i+1, frame.cols, frame.rows, frame.channels());
            } else {
                printf("   –ö–∞–¥—Ä %d: ‚ùå –ü—É—Å—Ç–æ–π\n", i+1);
            }
        } else {
            printf("   –ö–∞–¥—Ä %d: ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n", i+1);
        }
        usleep(100000); // 100 –º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    
    printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n");
    printf("   –£—Å–ø–µ—à–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤: %d/%d (%.1f%%)\n", 
           success_count, total_attempts, 
           (double)success_count * 100 / total_attempts);
    
    if (success_count > 0) {
        printf("‚úÖ USB DVR —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n");
        printf("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n");
    } else {
        printf("‚ùå USB DVR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n");
        printf("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n");
        printf("   - –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –≤—Ö–æ–¥–µ DVR\n");
        printf("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏\n");
        printf("   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π\n");
    }
    
    cap.release();
    return 0;
}
